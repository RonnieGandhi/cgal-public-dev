
\page Chapter_2D_Periodic_Hyperbolic_Triangulations 2D Periodic Hyperbolic Triangulations

namespace CGAL {
/*!

\mainpage User Manual 
\anchor Chapter_2D_Periodic_Hyperbolic_Triangulations
\anchor chapterP4HTriangulation2

\cgalAutoToc
\author Iordan Iordanov & Monique Teillaud

\image html triangulation-350px.png 

The 2D periodic hyperbolic triangulations class of \cgal is designed to represent 
triangulations of sets of points on the two-dimensional Bolza surface. 

The Bolza surface is a closed compact orientable surface of genus 2. Closed compact 
surfaces of genus at least 2 all have constant negative curvature, so they are 
hyperbolic. Among all surfaces of genus 2, the Bolza surface is the most symmetric one, 
and its properties are well understood. It is a natural extension from genus 1 (the 
Euclidean flat torus, see \ref Chapter_2D_Periodic_Triangulations ) to genus 2.

Triangulations of the Bolza surface are periodic triangulations of the hyperbolic 
plane, and they are also <i>simplicial complexes</i>, i.e. a triangulation:
<ul>
  <li> contains all incident \f$ j\f$-simplices (\f$ j<k\f$) of any \f$ k\f$-simplex, and 
  <li> two \f$ k\f$-simplices either do not intersect or share a common \f$ j\f$-face, \f$ j<k\f$. 
</ul>
The simplices of dimension 0, 1 and 2 are called <I>vertex</I>, <I>edge</I>, and <I>face</I>, respectively. For more details on simplices, see \ref Chapter_Triangulations.


\section P4HT2_thespace The Bolza surface

Let \f$\mathbb{H}^2\f$ denote the hyperbolic plane, represented in the Poincaré disk model.
Consider the regular hyperbolic octagon \f$ \mathcal D_O \f$ centered at the origin, with 
all angles equal to \f$ \pi/4\f$. Note that \f$\mathcal D_O\f$ is unique up to rotation, 
and cannot be scaled, since this operation would change its angle sum. Now, consider the 
four hyperbolic translations \f$ a,b,c,d\f$ with their respective inverses \f$\overline{a}, 
\overline{b}, \overline{c}, \overline{d}\f$ that identify the opposite sides of 
\f$ \mathcal D_O \f$. The axes of these translations are diameters of the Poincaré disk. 
See Figure \cgalFigureRef{P4HTriangulationOctagonId} - Left. The four translations 
\f$a, b, c, d\f$ generate a discrete group of orientation-preserving isometries, with 
finite presentation
\f[ \mathcal{G} = \left< a,b,c,d \; \bigg| \; 
    abcd\overline{a}\overline{b}\overline{c}\overline{d} \right>. \f]
The Bolza surface \f$\mathcal{M}\f$ is defined as \f$\mathcal{M} = \mathbb H^2 / \mathcal{G}\f$.
\f$\mathcal G\f$ is the fundamental group of \f$\mathcal M\f$. The octagon \f$\mathcal D_O\f$
is a fundamental domain for \f$\mathcal G\f$.

\cgalFigureBegin{P4HTriangulationOctagonId, octagon_identification.png, original_domain.png}
	<b>Left:</b> The hyperbolic translations \f$a,b,c,d\f$ and their inverses identify opposite sides of \f$\mathcal D_o\f$.
	<b>Right:</b> The half-open octagon is an original domain for \f$\mathcal{M}\f$. Note that only one of the vertices of the octagon is included in the original domain.
\cgalFigureEnd

We say that two elements \f$p\f$ and \f$q\f$ in \f$\mathbb H^2\f$ are in the same orbit 
under the action of \f$\mathcal G\f$ if there exists an element \f$g \in \mathcal G\f$ such 
that \f$g(p) = q\f$. Each element of \f$\mathcal M\f$ corresponds to the orbit of an element 
of \f$\mathbb H^2\f$ under the action of \f$\mathcal G\f$. So, each element of 
\f$\mathcal M\f$ has infinitely many images in \f$\mathbb H^2\f$; we call these images the 
<i>representatives</i> of an element of \f$\mathcal{M}\f$. 

The implementation does not work directly on elements of \f$\mathcal{M}\f$, 
but on some representatives in \f$\mathbb H^2\f$ that we distinguish. The half-open octagon 
shown in Figure \cgalFigureRef{P4HTriangulationOctagonId} - Right contains exactly one
representative of each point on \f$\mathcal{M}\f$, and we call that half-open octagon the
<i>original domain</i> \f$\mathcal D\f$. From now on, whenever we talk about a <i>point</i>, 
we will generally mean the representative of an element of \f$\mathcal{M}\f$ that lies inside 
\f$\mathcal D\f$. 

We require that all input points lie inside \f$\mathcal D\f$. Edges and faces, however, may 
cross the boundary of \f$\mathcal D\f$, i.e., they may be defined in terms of points 
both inside and outside \f$\mathcal D\f$. The points outside \f$\mathcal D\f$ are images 
of points inside \f$\mathcal D\f$ under the action of some translation in the group
\f$\mathcal{G}\f$. So, to specify an edge or a face, we use two or three pairs of points 
and translations in \f$\mathcal{G}\f$; points in the original domain are paired with the 
identity translation \f$\mathbb 1\f$. 


\section P4HT2_representation Representation 

A triangulation is a collection of vertices and faces that are linked together through incidence
and adjacency relations. Each vertex stores a point, and gives access to one of its incident
faces. Each face gives access to its three adjacent faces, to its three incident vertices, and 
to the translation paired with the point in each vertex. 

The three vertices of a face are indexed with 0, 1 and 2 in positive (counter-clockwise)
orientation. The orientation of a face in \f$\mathcal{M}\f$ is defined as the orientation of 
its representative in \f$\mathbb H^2\f$ defined by the translations it stores.

As in the underlying combinatorial triangulation (see Chapter \ref Chapter_2D_Triangulation_Data_Structure), 
the neighbors of a face are indexed with 0, 1, 2 in such a
way that the \f$i\f$-th neighbor is opposite to the vertex with the same index. Edges are not
explicitly represented: an edge is given by a face and the index of its opposite vertex 
in that face. See Figure  \cgalFigureRef{P4HTriangulationOrientationDS} - Left.

\cgalFigureBegin{P4HTriangulationOrientationDS, P4T_ds_doc_300.png, periodic_face.png}
	<b>Left:</b>  Representation of a face \f$f\f$ stored in the triangulation data structure. 
                Each vertex \f$v_i\f$ stores a point \f$p_i\f$ that is paired with a translation
                \f$\tau_i\f$. Opposite to vertex \f$i\f$ is the \f$i\f$-th neighbor of \f$f\f$.
	<b>Right:</b> Illustration of the canonical representative in \f$\mathbb H^2\f$ of a face on 
                \f$\mathcal M\f$. Among the three candidate faces, the canonical representative 
                is the green one, which is closest to the region labeled \f$abcd\f$
                clockwise. In the 
                face we store the translations that produce its canonical representative in
                \f$\mathbb H^2\f$, in this case \f$\mathbb 1, a\f$, and \f$\overline{b}\f$,
                corresponding to the points \f$p, q\f$, and \f$r\f$.
\cgalFigureEnd

In the data structure each vertex stores the input point in \f$\mathcal D\f$ to which it
corresponds. For every face on \f$\mathcal{M}\f$, the data structure stores the <i>canonical
representative</i> of that face in \f$\mathbb H^2\f$. 

We introduce some notation necessary for the definition of canonical representative.
Let \f$\mathcal N\f$ denote the translations of \f$\mathcal G\f$ for which the image
of \f$\mathcal D_O\f$ has at least one vertex in common with \f$\mathcal D_O\f$. Let 
\f$\mathcal D_{\mathcal N}\f$ be the union of \f$\mathcal D_O\f$ and these images. With the use 
of dummy points (see \ref P4HT2_Dummy_points),  faces with at least one vertex in 
\f$\mathcal D\f$ are contained in \f$\mathcal D_{\mathcal N}\f$. We consider the images 
of \f$\mathcal D_O\f$ to be ordered counter-clockwise around \f$\mathcal D_O\f$, 
arbitrarily starting with the one labeled \f$abcd\f$. See Figure \cgalFigureRef{P4HTriangulationOrientationDS} - Right.
We then choose the canonical representative in \f$\mathbb H^2\f$ of a face on 
\f$\mathcal M\f$ so that:
<ul>
  <li> either all vertices of the representative lie in \f$\mathcal D\f$, or
  <li> the representative has at least one vertex in \f$\mathcal D\f$ and is as close as 
       possible to \f$abcd\f$ in the ordering defined above. 
</ul>


<b>Validity</b> <br>
A periodic hyperbolic triangulation of \f$\mathcal{M}\f$ is said to be `valid` if and only if
<ol>
  <li>  Its underlying combinatorial graph, the triangulation data structure, is `valid`
        (see Chapter \ref Chapter_2D_Triangulation_Data_Structure).
  <li>  The combinatorial graph of the triangulation does not contain cycles of length 1 or 2.
  <li>  Each face of the triangulation is positively oriented. See 
        \cgalFigureRef{P4HTriangulationOrientationDS}. 
  <li>  All triangles are topological disks; this condition is satisfied when the Euler 
        relation \f$V-E+F = -2\f$ is verified, where \f$V, E, F\f$ are the number 
        of vertices, edges and faces of the triangulation, respectively.
</ol>



\section P4HT2_Delaunay Hyperbolic Delaunay triangulation

The class `Periodic_4_hyperbolic_Delaunay_triangulation_2` implements Delaunay triangulations of 
\f$\mathcal M\f$. The prefix "Periodic_4" emphasizes that the triangulation is periodic in the four
directions defined by the hyperbolic translations \f$ a,b,c\f$ and \f$d\f$.

Delaunay triangulations have the <I>empty circle property</I>, that is, the circumscribing
hyperbolic circle of each face does not contain any other vertex of the triangulation in its
interior. These triangulations are uniquely defined if no more than three points are co-circular.
Note however that the \cgal implementation computes a unique triangulation even in
these cases \cgalCite{cgal:dt-pvr3d-03}. Note also that since hyperbolic circles coincide with 
Euclidean circles in the Poincaré disk model, the implementation uses Euclidean predicates to
ensure the Delaunay property. 

This implementation is fully dynamic: it supports both insertions of points and vertex removal.
Note, however, that the removal of a vertex is authorized only if the triangulation would remain 
a simplicial complex after the removal of that vertex. If this condition is not satisfied, then 
then the vertex if <b>not</b> removed from the triangulation.



\section P4HT2_Dummy_points Dummy points

Some point sets do not admit a triangulation of \f$\mathcal M\f$. For this reason, we initialize 
a triangulation of \f$\mathcal M\f$ with a predetermined set of 14 points, called <i>dummy 
points</i>, whose triangulation in \f$\mathcal M\f$ is a simplicial complex and has the empty
circle property. The set of dummy points has been proposed in \cgalCite{cgal:btv-dtosl-16}. 
See Figure \cgalFigureRef{P4HTriangulationDummyPoints}

\cgalFigureBegin{P4HTriangulationDummyPoints, dummy-points-300.png}
  Delaunay triangulation of \f$\mathcal M\f$ with the 14 dummy points. The set of dummy points
  contains the origin, the vertex of \f$\mathcal D\f$, the midpoints of the closed sides of 
  \f$D\f$, and the hyperbolic midpoints of the segments between the origin and the vertices 
  of the octagon. 
\cgalFigureEnd

After the triangulation has been initialized with the dummy points, new
input points can be inserted. If sufficiently many well-distributed points are inserted, the 
dummy points become redundant, i.e., the triangulation remains a simplicial complex even if 
we remove them. If the set of input points is not sufficiently large, or if the points 
are not well-distributed on the surface, then the final triangulation will contain the necessary
dummy points to guarantee that the triangulation is a simplicial complex. Experiments have 
shown that, on average, all dummy points are removed from the triangulation with the insertion 
of less than 200 random points uniformly distributed (according to the Euclidean metric) in 
the unit disk. See Figure \cgalFigureRef{P4HDummyPointsHistogram}.

\cgalFigureBegin{P4HDummyPointsHistogram, histogram-dummy-points.png}
  Histogram of the number of random input points needed to remove all dummy points in the
  triangulation. The data has been acquired over 500 executions.
\cgalFigureEnd



\section P4HT2_design Software Design 

The two main classes `Periodic_4_hyperbolic_Delaunay_triangulation_2` and
`Periodic_4_hyperbolic_triangulation_2` provide high-level geometric functionality and are
responsible for the geometric validity. `Periodic_4_hyperbolic_Delaunay_triangulation_2` contains
all the functionality that is special to Delaunay triangulations, such as point insertion and
vertex removal, the side-of-circle test, finding the conflicting region of a given point, and dual
functions. `Periodic_4_hyperbolic_triangulation_2` contains all the functionality that is common 
to triangulations in general, such as location of a point in the triangulation 
\cgalCite{cgal:dpt-wt-02}, and access functions. Note that `Periodic_4_hyperbolic_triangulation_2`
does <b>not</b> support point insertion or vertex removal.

The two classes are built as layers on top of a triangulation data structure, which stores their
combinatorial structure. This separation between the geometry and the combinatorics is reflected
in the software design by the fact that the triangulation classes take two template parameters:

- the <B>geometric traits</B> class, which provides all objects, predicates and constructions 
necessary for the computation of Delaunay triangulations of the Bolza surface.
It also provides the hyperbolic translations generating the group \f$\mathcal G\f$, as well as
to the translations in the set \f$\mathcal N\f$. This parameter follows the concept
`Periodic_4HyperbolicDelaunayTriangulationTraits_2`, and is described in more detail 
in Section \ref P4HT2_traits. 

- the <B>triangulation data structure</B> class, which encodes the combinatorial structure of 
the triangulation. This parameter follows the concept `TriangulationDataStructure_2`, and for
the purposes of this package is described in Section \ref P4HT2_datastructure.

\subsection P4HT2_traits The Geometric Traits Parameter 

The geometric traits class is the first template parameter of the periodic hyperbolic
triangulation classes. It is described by the concept 
`Periodic_4HyperbolicDelaunayTriangulationTraits_2`, which extends the concept
`HyperbolicDelaunayTriangulationTraits_2`, providing all necessary objects, predicates 
and constructions, as well as the hyperbolic translations of the group \f$\mathcal G\f$.

The default model for the concept `Periodic_4HyperbolicDelaunayTriangulationTraits_2` 
is the class `Periodic_4_hyperbolic_Delaunay_triangulation_traits_2`, which expects two 
template parameters:
<ul>
	<li> A `Kernel` with a `number type` that guarantees exact computations on algebraic numbers with nested square roots, for example `CGAL::Cartesian<CORE::Expr>`. This parameter has
  no default value. </li>
	<li> A model of the concept `HyperbolicOctagonTranslation`. This model must accept a `number
  type` as template parameter. The traits class feeds internally the `number type` of the `Kernel`
  into this model for consistency. The default value for this parameter is the class
  `Hyperbolic_octagon_translation`. </li>
</ul>

Refer to Section \ref P4HT2_examples for a complete example on instantiating a triangulation of
the Bolza surface.

If the field type used in `Kernel` provides exact operations with algebraic numbers involving
nested square roots, then the traits class provides exact predicates and exact constructions.  
In addition, inexact constructions using `double` number type are also provided.

\subsection P4HT2_datastructure The Triangulation Data Structure Parameter 

The triangulation data structure class is the second template parameter of the periodic hyperbolic
triangulation classes. It is a container for the faces and vertices and maintains
incidence and adjacency relations. For details, see Chapter 
\ref Chapter_2D_Triangulation_Data_Structure. 
This parameter follows the concept `TriangulationDataStructure_2`, for which \cgal offers 
the model `Triangulation_data_structure_2`. This model is itself parameterized by a vertex 
base class and a face base class, which gives the possibility to customize the vertices and 
faces used by the triangulation data structure. To represent periodic hyperbolic triangulations,
the face base and vertex base classes must be models of the concepts
`TriangulationFaceBase_2<Traits, Periodic_4HyperbolicTriangulationDSFaceBase_2>` and
`TriangulationVertexBase_2<Traits, Periodic_4HyperbolicTriangulationDSVertexBase_2>`, 
respectively.

The default value for the triangulation data structure parameter in the hyperbolic periodic 
triangulation classes is 
`Triangulation_data_structure_2< Triangulation_face_base_2< Traits, Periodic_4_hyperbolic_triangulation_ds_face_base_2 >, Triangulation_vertex_base_2<Traits, Periodic_4_hyperbolic_triangulation_ds_vertex_base_2 > >` 


\section P4HT2_examples Examples 

\subsection P4HT2_basicexample Basic example

This example shows the initialization of a periodic hyperbolic 2D Delaunay triangulation,  the
insertion of random points uniformly distributed in the unit disk for the Euclidean metric, and the
properties of the triangulation after the insertion. It uses the default parameter of the
`Periodic_4_hyperbolic_Delaunay_triangulation_2` class for the triangulation data structure.

\cgalExample{Periodic_4_hyperbolic_triangulation_2/p4ht2_example_insertion.cpp}

\section P4HT2_Performance Performance

We perform tests with a hyperbolic periodic triangulation using `CORE::Expr` as `number type`.
We insert 1 million random points, uniformly distributed in the fundamental octagon according
to the Euclidean metric. Averaged over 10 executions, the insertion takes around 54 seconds.
For exactly the same sets of points, a Euclidean non-periodic \cgal Delaunay triangulation 
with `CORE::Expr` as `number type` takes around 22 seconds. For comparison, a \cgal Delaunay
triangulation with `double` number type takes around 1 second.

The experiments were run on an Intel i5 @ 2.9GHz with 16GB RAM @ 1867MHz. The executables 
were built in Release mode using the GCC compiler version 7.3.0.

\section P4HT2_Design Design and Implementation History

This package implements the algorithm for the computation of Delaunay triangulation of the Bolza
surface proposed by Mikhail Bogdanov,  Monique Teillaud and Gert Vegter 
\cgalCite{cgal:btv-dtosl-16}. The implementation itself is described by Iordan Iordanov and 
Monique Teillaud \cgalCite{cgal:it-idtbs-17}.

In 2016, Iordanov started working on the 2D Periodic Hyperbolic Triangulations package. 



*/ 
} /* namespace CGAL */

\\\\\\\\\\\\
